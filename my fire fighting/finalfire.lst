;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/20/2024 10:44:17 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x298C      	GOTO       396
_stopWaterPump:
;finalfire.c,123 :: 		void stopWaterPump() {
;finalfire.c,124 :: 		CCPR1L = 0x80; // Stop servo motor
0x0003	0x3080      	MOVLW      128
0x0004	0x1283      	BCF        STATUS, 5
0x0005	0x1303      	BCF        STATUS, 6
0x0006	0x0095      	MOVWF      CCPR1L
;finalfire.c,125 :: 		PORTD = 0x00;
0x0007	0x0188      	CLRF       PORTD
;finalfire.c,126 :: 		delay_ms(1000);
0x0008	0x300B      	MOVLW      11
0x0009	0x00FB      	MOVWF      R11
0x000A	0x3026      	MOVLW      38
0x000B	0x00FC      	MOVWF      R12
0x000C	0x305D      	MOVLW      93
0x000D	0x00FD      	MOVWF      R13
L_stopWaterPump21:
0x000E	0x0BFD      	DECFSZ     R13, 1
0x000F	0x280E      	GOTO       L_stopWaterPump21
0x0010	0x0BFC      	DECFSZ     R12, 1
0x0011	0x280E      	GOTO       L_stopWaterPump21
0x0012	0x0BFB      	DECFSZ     R11, 1
0x0013	0x280E      	GOTO       L_stopWaterPump21
0x0014	0x0000      	NOP
0x0015	0x0000      	NOP
;finalfire.c,127 :: 		pumping = 0x00;
0x0016	0x01A2      	CLRF       _pumping
;finalfire.c,128 :: 		}
L_end_stopWaterPump:
0x0017	0x0008      	RETURN
; end of _stopWaterPump
_startWaterPump:
;finalfire.c,104 :: 		void startWaterPump() {
;finalfire.c,105 :: 		PORTD = 0x80;
0x0018	0x3080      	MOVLW      128
0x0019	0x1283      	BCF        STATUS, 5
0x001A	0x1303      	BCF        STATUS, 6
0x001B	0x0088      	MOVWF      PORTD
;finalfire.c,106 :: 		angle = 0x00;
0x001C	0x01A7      	CLRF       _angle
0x001D	0x01A8      	CLRF       _angle+1
;finalfire.c,107 :: 		CCPR1L = 0x80;
0x001E	0x3080      	MOVLW      128
0x001F	0x0095      	MOVWF      CCPR1L
;finalfire.c,108 :: 		while((PORTA & 0x02) == 0){
L_startWaterPump16:
0x0020	0x3002      	MOVLW      2
0x0021	0x0505      	ANDWF      PORTA, 0
0x0022	0x00F1      	MOVWF      R1
0x0023	0x0871      	MOVF       R1, 0
0x0024	0x3A00      	XORLW      0
0x0025	0x1D03      	BTFSS      STATUS, 2
0x0026	0x2847      	GOTO       L_startWaterPump17
;finalfire.c,109 :: 		if(angle == 0x00){
0x0027	0x3000      	MOVLW      0
0x0028	0x0628      	XORWF      _angle+1, 0
0x0029	0x1D03      	BTFSS      STATUS, 2
0x002A	0x282D      	GOTO       L__startWaterPump51
0x002B	0x3000      	MOVLW      0
0x002C	0x0627      	XORWF      _angle, 0
L__startWaterPump51:
0x002D	0x1D03      	BTFSS      STATUS, 2
0x002E	0x2836      	GOTO       L_startWaterPump18
;finalfire.c,110 :: 		angle = 0x01;
0x002F	0x3001      	MOVLW      1
0x0030	0x00A7      	MOVWF      _angle
0x0031	0x3000      	MOVLW      0
0x0032	0x00A8      	MOVWF      _angle+1
;finalfire.c,111 :: 		CCPR1L = 0x40;
0x0033	0x3040      	MOVLW      64
0x0034	0x0095      	MOVWF      CCPR1L
;finalfire.c,112 :: 		}
0x0035	0x283A      	GOTO       L_startWaterPump19
L_startWaterPump18:
;finalfire.c,114 :: 		angle = 0x00;
0x0036	0x01A7      	CLRF       _angle
0x0037	0x01A8      	CLRF       _angle+1
;finalfire.c,115 :: 		CCPR1L = 0xBF;
0x0038	0x30BF      	MOVLW      191
0x0039	0x0095      	MOVWF      CCPR1L
;finalfire.c,116 :: 		}
L_startWaterPump19:
;finalfire.c,117 :: 		delay_ms(850);
0x003A	0x3009      	MOVLW      9
0x003B	0x00FB      	MOVWF      R11
0x003C	0x30A0      	MOVLW      160
0x003D	0x00FC      	MOVWF      R12
0x003E	0x30C3      	MOVLW      195
0x003F	0x00FD      	MOVWF      R13
L_startWaterPump20:
0x0040	0x0BFD      	DECFSZ     R13, 1
0x0041	0x2840      	GOTO       L_startWaterPump20
0x0042	0x0BFC      	DECFSZ     R12, 1
0x0043	0x2840      	GOTO       L_startWaterPump20
0x0044	0x0BFB      	DECFSZ     R11, 1
0x0045	0x2840      	GOTO       L_startWaterPump20
;finalfire.c,118 :: 		};
0x0046	0x2820      	GOTO       L_startWaterPump16
L_startWaterPump17:
;finalfire.c,119 :: 		stopWaterPump();
0x0047	0x2003      	CALL       _stopWaterPump
;finalfire.c,120 :: 		}
L_end_startWaterPump:
0x0048	0x0008      	RETURN
; end of _startWaterPump
_forward:
;finalfire.c,159 :: 		void forward() {
;finalfire.c,160 :: 		moving_Forward = 0x01;
0x0049	0x3001      	MOVLW      1
0x004A	0x1283      	BCF        STATUS, 5
0x004B	0x1303      	BCF        STATUS, 6
0x004C	0x00A6      	MOVWF      _moving_Forward
;finalfire.c,161 :: 		PORTC = PORTC | 0x01;
0x004D	0x1407      	BSF        PORTC, 0
;finalfire.c,162 :: 		PORTD = 0x0A;
0x004E	0x300A      	MOVLW      10
0x004F	0x0088      	MOVWF      PORTD
;finalfire.c,163 :: 		}
L_end_forward:
0x0050	0x0008      	RETURN
; end of _forward
_stopCar:
;finalfire.c,167 :: 		void stopCar() {
;finalfire.c,168 :: 		PORTC = PORTC & 0xFE;
0x0051	0x30FE      	MOVLW      254
0x0052	0x1283      	BCF        STATUS, 5
0x0053	0x1303      	BCF        STATUS, 6
0x0054	0x0587      	ANDWF      PORTC, 1
;finalfire.c,169 :: 		PORTD = 0x00;
0x0055	0x0188      	CLRF       PORTD
;finalfire.c,170 :: 		delay_ms(3);
0x0056	0x3008      	MOVLW      8
0x0057	0x00FC      	MOVWF      R12
0x0058	0x30C9      	MOVLW      201
0x0059	0x00FD      	MOVWF      R13
L_stopCar28:
0x005A	0x0BFD      	DECFSZ     R13, 1
0x005B	0x285A      	GOTO       L_stopCar28
0x005C	0x0BFC      	DECFSZ     R12, 1
0x005D	0x285A      	GOTO       L_stopCar28
0x005E	0x0000      	NOP
0x005F	0x0000      	NOP
;finalfire.c,171 :: 		moving_Forward = 0x00;
0x0060	0x01A6      	CLRF       _moving_Forward
;finalfire.c,172 :: 		}
L_end_stopCar:
0x0061	0x0008      	RETURN
; end of _stopCar
_ATD_read:
;finalfire.c,221 :: 		unsigned int ATD_read(unsigned int channel_Number)
;finalfire.c,223 :: 		channel_Number = channel_Number << 3;
0x0062	0x1283      	BCF        STATUS, 5
0x0063	0x1303      	BCF        STATUS, 6
0x0064	0x082D      	MOVF       FARG_ATD_read_channel_Number, 0
0x0065	0x00F1      	MOVWF      R1
0x0066	0x082E      	MOVF       FARG_ATD_read_channel_Number+1, 0
0x0067	0x00F2      	MOVWF      R1+1
0x0068	0x0DF1      	RLF        R1, 1
0x0069	0x0DF2      	RLF        R1+1, 1
0x006A	0x1071      	BCF        R1, 0
0x006B	0x0DF1      	RLF        R1, 1
0x006C	0x0DF2      	RLF        R1+1, 1
0x006D	0x1071      	BCF        R1, 0
0x006E	0x0DF1      	RLF        R1, 1
0x006F	0x0DF2      	RLF        R1+1, 1
0x0070	0x1071      	BCF        R1, 0
0x0071	0x0871      	MOVF       R1, 0
0x0072	0x00AD      	MOVWF      FARG_ATD_read_channel_Number
0x0073	0x0872      	MOVF       R1+1, 0
0x0074	0x00AE      	MOVWF      FARG_ATD_read_channel_Number+1
;finalfire.c,224 :: 		ADCON0 = 0x01;
0x0075	0x3001      	MOVLW      1
0x0076	0x009F      	MOVWF      ADCON0
;finalfire.c,225 :: 		ADCON0 = ADCON0 | 0x04 | channel_Number; // go + this chanle number
0x0077	0x3004      	MOVLW      4
0x0078	0x041F      	IORWF      ADCON0, 0
0x0079	0x00F0      	MOVWF      R0
0x007A	0x0871      	MOVF       R1, 0
0x007B	0x0470      	IORWF      R0, 0
0x007C	0x009F      	MOVWF      ADCON0
;finalfire.c,226 :: 		while (ADCON0 & 0x04);
L_ATD_read37:
0x007D	0x1D1F      	BTFSS      ADCON0, 2
0x007E	0x2880      	GOTO       L_ATD_read38
0x007F	0x287D      	GOTO       L_ATD_read37
L_ATD_read38:
;finalfire.c,228 :: 		return ((ADRESH << 8) | ADRESL);
0x0080	0x081E      	MOVF       ADRESH, 0
0x0081	0x00F1      	MOVWF      R0+1
0x0082	0x01F0      	CLRF       R0
0x0083	0x1683      	BSF        STATUS, 5
0x0084	0x081E      	MOVF       ADRESL, 0
0x0085	0x04F0      	IORWF      R0, 1
0x0086	0x3000      	MOVLW      0
0x0087	0x04F1      	IORWF      R0+1, 1
;finalfire.c,229 :: 		}
L_end_ATD_read:
0x0088	0x0008      	RETURN
; end of _ATD_read
_goToFire:
;finalfire.c,175 :: 		void goToFire() {
;finalfire.c,176 :: 		unsigned char going = 0x01;
0x0089	0x3001      	MOVLW      1
0x008A	0x1283      	BCF        STATUS, 5
0x008B	0x1303      	BCF        STATUS, 6
0x008C	0x00A9      	MOVWF      goToFire_going_L0
0x008D	0x01AA      	CLRF       goToFire_found_fire_L0
0x008E	0x01AB      	CLRF       goToFire_fire_read_L0
0x008F	0x01AC      	CLRF       goToFire_fire_read_L0+1
;finalfire.c,180 :: 		forward();
0x0090	0x2049      	CALL       _forward
;finalfire.c,183 :: 		while (going) {
L_goToFire29:
0x0091	0x0829      	MOVF       goToFire_going_L0, 0
0x0092	0x1903      	BTFSC      STATUS, 2
0x0093	0x28B3      	GOTO       L_goToFire30
;finalfire.c,184 :: 		fire_read = ATD_read(0x00);
0x0094	0x01AD      	CLRF       FARG_ATD_read_channel_Number
0x0095	0x01AE      	CLRF       FARG_ATD_read_channel_Number+1
0x0096	0x2062      	CALL       _ATD_read
0x0097	0x0870      	MOVF       R0, 0
0x0098	0x1283      	BCF        STATUS, 5
0x0099	0x00AB      	MOVWF      goToFire_fire_read_L0
0x009A	0x0871      	MOVF       R0+1, 0
0x009B	0x00AC      	MOVWF      goToFire_fire_read_L0+1
;finalfire.c,187 :: 		if (fire_read <= 0x0096) {  // 100
0x009C	0x0871      	MOVF       R0+1, 0
0x009D	0x3C00      	SUBLW      0
0x009E	0x1D03      	BTFSS      STATUS, 2
0x009F	0x28A2      	GOTO       L__goToFire60
0x00A0	0x0870      	MOVF       R0, 0
0x00A1	0x3C96      	SUBLW      150
L__goToFire60:
0x00A2	0x1C03      	BTFSS      STATUS, 0
0x00A3	0x28A8      	GOTO       L_goToFire31
;finalfire.c,188 :: 		going = 0x00;
0x00A4	0x01A9      	CLRF       goToFire_going_L0
;finalfire.c,189 :: 		found_fire = 0x01;
0x00A5	0x3001      	MOVLW      1
0x00A6	0x00AA      	MOVWF      goToFire_found_fire_L0
;finalfire.c,190 :: 		}
0x00A7	0x28B2      	GOTO       L_goToFire32
L_goToFire31:
;finalfire.c,193 :: 		else if (fire_read  >= 900)  // 900
0x00A8	0x3003      	MOVLW      3
0x00A9	0x022C      	SUBWF      goToFire_fire_read_L0+1, 0
0x00AA	0x1D03      	BTFSS      STATUS, 2
0x00AB	0x28AE      	GOTO       L__goToFire61
0x00AC	0x3084      	MOVLW      132
0x00AD	0x022B      	SUBWF      goToFire_fire_read_L0, 0
L__goToFire61:
0x00AE	0x1C03      	BTFSS      STATUS, 0
0x00AF	0x28B2      	GOTO       L_goToFire33
;finalfire.c,195 :: 		going = 0x00;
0x00B0	0x01A9      	CLRF       goToFire_going_L0
;finalfire.c,196 :: 		found_fire = 0x00;
0x00B1	0x01AA      	CLRF       goToFire_found_fire_L0
;finalfire.c,197 :: 		}
L_goToFire33:
L_goToFire32:
;finalfire.c,198 :: 		}
0x00B2	0x2891      	GOTO       L_goToFire29
L_goToFire30:
;finalfire.c,201 :: 		if(found_fire == 0x01){
0x00B3	0x082A      	MOVF       goToFire_found_fire_L0, 0
0x00B4	0x3A01      	XORLW      1
0x00B5	0x1D03      	BTFSS      STATUS, 2
0x00B6	0x28B9      	GOTO       L_goToFire34
;finalfire.c,202 :: 		pumping = 0x01;
0x00B7	0x3001      	MOVLW      1
0x00B8	0x00A2      	MOVWF      _pumping
;finalfire.c,203 :: 		}
L_goToFire34:
;finalfire.c,204 :: 		stopCar();
0x00B9	0x2051      	CALL       _stopCar
;finalfire.c,205 :: 		delay_ms(500);
0x00BA	0x3006      	MOVLW      6
0x00BB	0x00FB      	MOVWF      R11
0x00BC	0x3013      	MOVLW      19
0x00BD	0x00FC      	MOVWF      R12
0x00BE	0x30AD      	MOVLW      173
0x00BF	0x00FD      	MOVWF      R13
L_goToFire35:
0x00C0	0x0BFD      	DECFSZ     R13, 1
0x00C1	0x28C0      	GOTO       L_goToFire35
0x00C2	0x0BFC      	DECFSZ     R12, 1
0x00C3	0x28C0      	GOTO       L_goToFire35
0x00C4	0x0BFB      	DECFSZ     R11, 1
0x00C5	0x28C0      	GOTO       L_goToFire35
0x00C6	0x0000      	NOP
0x00C7	0x0000      	NOP
;finalfire.c,206 :: 		if(pumping == 0x01)
0x00C8	0x0822      	MOVF       _pumping, 0
0x00C9	0x3A01      	XORLW      1
0x00CA	0x1D03      	BTFSS      STATUS, 2
0x00CB	0x28CD      	GOTO       L_goToFire36
;finalfire.c,208 :: 		startWaterPump();
0x00CC	0x2018      	CALL       _startWaterPump
;finalfire.c,209 :: 		}
L_goToFire36:
;finalfire.c,210 :: 		}
L_end_goToFire:
0x00CD	0x0008      	RETURN
; end of _goToFire
_left:
;finalfire.c,145 :: 		void left() {
;finalfire.c,146 :: 		moving_Forward = 0x01; // low speed
0x00CE	0x3001      	MOVLW      1
0x00CF	0x1283      	BCF        STATUS, 5
0x00D0	0x1303      	BCF        STATUS, 6
0x00D1	0x00A6      	MOVWF      _moving_Forward
;finalfire.c,147 :: 		PORTC = PORTC | 0x01;
0x00D2	0x1407      	BSF        PORTC, 0
;finalfire.c,148 :: 		ctr_return = 0x00;
0x00D3	0x01A0      	CLRF       _ctr_return
0x00D4	0x01A1      	CLRF       _ctr_return+1
;finalfire.c,149 :: 		PORTD = 0x01;
0x00D5	0x3001      	MOVLW      1
0x00D6	0x0088      	MOVWF      PORTD
;finalfire.c,150 :: 		while (ctr_return < 0x78) // Rotate 90 degree
L_left25:
0x00D7	0x3000      	MOVLW      0
0x00D8	0x0221      	SUBWF      _ctr_return+1, 0
0x00D9	0x1D03      	BTFSS      STATUS, 2
0x00DA	0x28DD      	GOTO       L__left56
0x00DB	0x3078      	MOVLW      120
0x00DC	0x0220      	SUBWF      _ctr_return, 0
L__left56:
0x00DD	0x1803      	BTFSC      STATUS, 0
0x00DE	0x28ED      	GOTO       L_left26
;finalfire.c,152 :: 		ctr_return++;
0x00DF	0x0AA0      	INCF       _ctr_return, 1
0x00E0	0x1903      	BTFSC      STATUS, 2
0x00E1	0x0AA1      	INCF       _ctr_return+1, 1
;finalfire.c,153 :: 		delay_ms(3);
0x00E2	0x3008      	MOVLW      8
0x00E3	0x00FC      	MOVWF      R12
0x00E4	0x30C9      	MOVLW      201
0x00E5	0x00FD      	MOVWF      R13
L_left27:
0x00E6	0x0BFD      	DECFSZ     R13, 1
0x00E7	0x28E6      	GOTO       L_left27
0x00E8	0x0BFC      	DECFSZ     R12, 1
0x00E9	0x28E6      	GOTO       L_left27
0x00EA	0x0000      	NOP
0x00EB	0x0000      	NOP
;finalfire.c,154 :: 		}
0x00EC	0x28D7      	GOTO       L_left25
L_left26:
;finalfire.c,155 :: 		stopCar();
0x00ED	0x2051      	CALL       _stopCar
;finalfire.c,156 :: 		}
L_end_left:
0x00EE	0x0008      	RETURN
; end of _left
_right:
;finalfire.c,131 :: 		void right() {
;finalfire.c,132 :: 		moving_Forward = 0x01;
0x00EF	0x3001      	MOVLW      1
0x00F0	0x1283      	BCF        STATUS, 5
0x00F1	0x1303      	BCF        STATUS, 6
0x00F2	0x00A6      	MOVWF      _moving_Forward
;finalfire.c,133 :: 		PORTC = PORTC | 0x01;
0x00F3	0x1407      	BSF        PORTC, 0
;finalfire.c,134 :: 		ctr_return = 0x00;
0x00F4	0x01A0      	CLRF       _ctr_return
0x00F5	0x01A1      	CLRF       _ctr_return+1
;finalfire.c,135 :: 		PORTD = 0x04;
0x00F6	0x3004      	MOVLW      4
0x00F7	0x0088      	MOVWF      PORTD
;finalfire.c,136 :: 		while (ctr_return < 0x78) // Rotate 90 degree
L_right22:
0x00F8	0x3000      	MOVLW      0
0x00F9	0x0221      	SUBWF      _ctr_return+1, 0
0x00FA	0x1D03      	BTFSS      STATUS, 2
0x00FB	0x28FE      	GOTO       L__right54
0x00FC	0x3078      	MOVLW      120
0x00FD	0x0220      	SUBWF      _ctr_return, 0
L__right54:
0x00FE	0x1803      	BTFSC      STATUS, 0
0x00FF	0x290E      	GOTO       L_right23
;finalfire.c,138 :: 		ctr_return++;
0x0100	0x0AA0      	INCF       _ctr_return, 1
0x0101	0x1903      	BTFSC      STATUS, 2
0x0102	0x0AA1      	INCF       _ctr_return+1, 1
;finalfire.c,139 :: 		delay_ms(3);
0x0103	0x3008      	MOVLW      8
0x0104	0x00FC      	MOVWF      R12
0x0105	0x30C9      	MOVLW      201
0x0106	0x00FD      	MOVWF      R13
L_right24:
0x0107	0x0BFD      	DECFSZ     R13, 1
0x0108	0x2907      	GOTO       L_right24
0x0109	0x0BFC      	DECFSZ     R12, 1
0x010A	0x2907      	GOTO       L_right24
0x010B	0x0000      	NOP
0x010C	0x0000      	NOP
;finalfire.c,140 :: 		}
0x010D	0x28F8      	GOTO       L_right22
L_right23:
;finalfire.c,141 :: 		stopCar();
0x010E	0x2051      	CALL       _stopCar
;finalfire.c,142 :: 		}
L_end_right:
0x010F	0x0008      	RETURN
; end of _right
_moveTowardsFlame:
;finalfire.c,74 :: 		void moveTowardsFlame() {
;finalfire.c,76 :: 		if ((PORTA & 0x02) == 0) {
0x0110	0x3002      	MOVLW      2
0x0111	0x1283      	BCF        STATUS, 5
0x0112	0x1303      	BCF        STATUS, 6
0x0113	0x0505      	ANDWF      PORTA, 0
0x0114	0x00F1      	MOVWF      R1
0x0115	0x0871      	MOVF       R1, 0
0x0116	0x3A00      	XORLW      0
0x0117	0x1D03      	BTFSS      STATUS, 2
0x0118	0x291B      	GOTO       L_moveTowardsFlame7
;finalfire.c,77 :: 		goToFire();
0x0119	0x2089      	CALL       _goToFire
;finalfire.c,78 :: 		}
0x011A	0x2946      	GOTO       L_moveTowardsFlame8
L_moveTowardsFlame7:
;finalfire.c,81 :: 		else if ((PORTA & 0x04) == 0) {
0x011B	0x3004      	MOVLW      4
0x011C	0x0505      	ANDWF      PORTA, 0
0x011D	0x00F1      	MOVWF      R1
0x011E	0x0871      	MOVF       R1, 0
0x011F	0x3A00      	XORLW      0
0x0120	0x1D03      	BTFSS      STATUS, 2
0x0121	0x2933      	GOTO       L_moveTowardsFlame9
;finalfire.c,82 :: 		left();
0x0122	0x20CE      	CALL       _left
;finalfire.c,83 :: 		delay_ms(300);
0x0123	0x3004      	MOVLW      4
0x0124	0x00FB      	MOVWF      R11
0x0125	0x300C      	MOVLW      12
0x0126	0x00FC      	MOVWF      R12
0x0127	0x3033      	MOVLW      51
0x0128	0x00FD      	MOVWF      R13
L_moveTowardsFlame10:
0x0129	0x0BFD      	DECFSZ     R13, 1
0x012A	0x2929      	GOTO       L_moveTowardsFlame10
0x012B	0x0BFC      	DECFSZ     R12, 1
0x012C	0x2929      	GOTO       L_moveTowardsFlame10
0x012D	0x0BFB      	DECFSZ     R11, 1
0x012E	0x2929      	GOTO       L_moveTowardsFlame10
0x012F	0x0000      	NOP
0x0130	0x0000      	NOP
;finalfire.c,84 :: 		left();
0x0131	0x20CE      	CALL       _left
;finalfire.c,85 :: 		}
0x0132	0x2946      	GOTO       L_moveTowardsFlame11
L_moveTowardsFlame9:
;finalfire.c,88 :: 		else if ((PORTA & 0x08) == 0) {
0x0133	0x3008      	MOVLW      8
0x0134	0x0505      	ANDWF      PORTA, 0
0x0135	0x00F1      	MOVWF      R1
0x0136	0x0871      	MOVF       R1, 0
0x0137	0x3A00      	XORLW      0
0x0138	0x1D03      	BTFSS      STATUS, 2
0x0139	0x293C      	GOTO       L_moveTowardsFlame12
;finalfire.c,89 :: 		right();
0x013A	0x20EF      	CALL       _right
;finalfire.c,90 :: 		}
0x013B	0x2946      	GOTO       L_moveTowardsFlame13
L_moveTowardsFlame12:
;finalfire.c,93 :: 		else if ((PORTA & 0x10) == 0) {
0x013C	0x3010      	MOVLW      16
0x013D	0x0505      	ANDWF      PORTA, 0
0x013E	0x00F1      	MOVWF      R1
0x013F	0x0871      	MOVF       R1, 0
0x0140	0x3A00      	XORLW      0
0x0141	0x1D03      	BTFSS      STATUS, 2
0x0142	0x2945      	GOTO       L_moveTowardsFlame14
;finalfire.c,94 :: 		left();
0x0143	0x20CE      	CALL       _left
;finalfire.c,95 :: 		}
0x0144	0x2946      	GOTO       L_moveTowardsFlame15
L_moveTowardsFlame14:
;finalfire.c,99 :: 		stopCar();
0x0145	0x2051      	CALL       _stopCar
;finalfire.c,100 :: 		}
L_moveTowardsFlame15:
L_moveTowardsFlame13:
L_moveTowardsFlame11:
L_moveTowardsFlame8:
;finalfire.c,101 :: 		}
L_end_moveTowardsFlame:
0x0146	0x0008      	RETURN
; end of _moveTowardsFlame
_ATD_start:
;finalfire.c,213 :: 		void ATD_start()
;finalfire.c,215 :: 		ADCON0 = 0x01;
0x0147	0x3001      	MOVLW      1
0x0148	0x1283      	BCF        STATUS, 5
0x0149	0x1303      	BCF        STATUS, 6
0x014A	0x009F      	MOVWF      ADCON0
;finalfire.c,216 :: 		ADCON1 = 0xCE; // right justified , FOSC/4 ,RA0 only analog
0x014B	0x30CE      	MOVLW      206
0x014C	0x1683      	BSF        STATUS, 5
0x014D	0x009F      	MOVWF      ADCON1
;finalfire.c,217 :: 		TRISA = 0xFF; // Set PORTA as input(s)
0x014E	0x30FF      	MOVLW      255
0x014F	0x0085      	MOVWF      TRISA
;finalfire.c,218 :: 		}
L_end_ATD_start:
0x0150	0x0008      	RETURN
; end of _ATD_start
_PWM_Init:
;finalfire.c,244 :: 		void PWM_Init() {
;finalfire.c,245 :: 		CCPR1L = 0x80; // Stop servo motor
0x0151	0x3080      	MOVLW      128
0x0152	0x1283      	BCF        STATUS, 5
0x0153	0x1303      	BCF        STATUS, 6
0x0154	0x0095      	MOVWF      CCPR1L
;finalfire.c,246 :: 		CCP1CON = 0x0C;  // Configure CCP1 for PWM
0x0155	0x300C      	MOVLW      12
0x0156	0x0097      	MOVWF      CCP1CON
;finalfire.c,247 :: 		T2CON = 0x07; // Configure Timer2 for 50Hz PWM frequency with prescaler = 16
0x0157	0x3007      	MOVLW      7
0x0158	0x0092      	MOVWF      T2CON
;finalfire.c,248 :: 		}
L_end_PWM_Init:
0x0159	0x0008      	RETURN
; end of _PWM_Init
_checkFlameSensors:
;finalfire.c,68 :: 		void checkFlameSensors() {
;finalfire.c,69 :: 		if (moving_Forward == 0x00 && pumping == 0x00) {
0x015A	0x1283      	BCF        STATUS, 5
0x015B	0x1303      	BCF        STATUS, 6
0x015C	0x0826      	MOVF       _moving_Forward, 0
0x015D	0x3A00      	XORLW      0
0x015E	0x1D03      	BTFSS      STATUS, 2
0x015F	0x2965      	GOTO       L_checkFlameSensors6
0x0160	0x0822      	MOVF       _pumping, 0
0x0161	0x3A00      	XORLW      0
0x0162	0x1D03      	BTFSS      STATUS, 2
0x0163	0x2965      	GOTO       L_checkFlameSensors6
L__checkFlameSensors45:
;finalfire.c,70 :: 		moveTowardsFlame();
0x0164	0x2110      	CALL       _moveTowardsFlame
;finalfire.c,71 :: 		}
L_checkFlameSensors6:
;finalfire.c,72 :: 		}
L_end_checkFlameSensors:
0x0165	0x0008      	RETURN
; end of _checkFlameSensors
_initialize:
;finalfire.c,37 :: 		void initialize() {
;finalfire.c,39 :: 		ATD_start();
0x0166	0x2147      	CALL       _ATD_start
;finalfire.c,42 :: 		OPTION_REG &= 0x87;
0x0167	0x3087      	MOVLW      135
0x0168	0x0581      	ANDWF      OPTION_REG, 1
;finalfire.c,45 :: 		TRISB = 0x00;
0x0169	0x0186      	CLRF       TRISB
;finalfire.c,46 :: 		PORTB = 0x00;
0x016A	0x1283      	BCF        STATUS, 5
0x016B	0x0186      	CLRF       PORTB
;finalfire.c,49 :: 		TRISC = 0x00;
0x016C	0x1683      	BSF        STATUS, 5
0x016D	0x0187      	CLRF       TRISC
;finalfire.c,50 :: 		PORTC = 0x00;
0x016E	0x1283      	BCF        STATUS, 5
0x016F	0x0187      	CLRF       PORTC
;finalfire.c,54 :: 		TRISD = 0x00;
0x0170	0x1683      	BSF        STATUS, 5
0x0171	0x0188      	CLRF       TRISD
;finalfire.c,55 :: 		PORTD = 0x00;
0x0172	0x1283      	BCF        STATUS, 5
0x0173	0x0188      	CLRF       PORTD
;finalfire.c,57 :: 		delay_ms(500);
0x0174	0x3006      	MOVLW      6
0x0175	0x00FB      	MOVWF      R11
0x0176	0x3013      	MOVLW      19
0x0177	0x00FC      	MOVWF      R12
0x0178	0x30AD      	MOVLW      173
0x0179	0x00FD      	MOVWF      R13
L_initialize3:
0x017A	0x0BFD      	DECFSZ     R13, 1
0x017B	0x297A      	GOTO       L_initialize3
0x017C	0x0BFC      	DECFSZ     R12, 1
0x017D	0x297A      	GOTO       L_initialize3
0x017E	0x0BFB      	DECFSZ     R11, 1
0x017F	0x297A      	GOTO       L_initialize3
0x0180	0x0000      	NOP
0x0181	0x0000      	NOP
;finalfire.c,59 :: 		PWM_Init();
0x0182	0x2151      	CALL       _PWM_Init
;finalfire.c,61 :: 		ctr_return = 0; // Counter for rotation
0x0183	0x01A0      	CLRF       _ctr_return
0x0184	0x01A1      	CLRF       _ctr_return+1
;finalfire.c,62 :: 		moving_Forward = 0x00; // Car initially Stopped
0x0185	0x01A6      	CLRF       _moving_Forward
;finalfire.c,63 :: 		pumping = 0x00; // Pump initially Stopped
0x0186	0x01A2      	CLRF       _pumping
;finalfire.c,64 :: 		HL = 1; // start high
0x0187	0x3001      	MOVLW      1
0x0188	0x00A3      	MOVWF      _HL
;finalfire.c,65 :: 		angle = 0x00; // angle 0
0x0189	0x01A7      	CLRF       _angle
0x018A	0x01A8      	CLRF       _angle+1
;finalfire.c,66 :: 		}
L_end_initialize:
0x018B	0x0008      	RETURN
; end of _initialize
_main:
;finalfire.c,24 :: 		void main() {
;finalfire.c,26 :: 		initialize();
0x018C	0x2166      	CALL       _initialize
;finalfire.c,29 :: 		delay_ms(750);
0x018D	0x3008      	MOVLW      8
0x018E	0x00FB      	MOVWF      R11
0x018F	0x309D      	MOVLW      157
0x0190	0x00FC      	MOVWF      R12
0x0191	0x3005      	MOVLW      5
0x0192	0x00FD      	MOVWF      R13
L_main0:
0x0193	0x0BFD      	DECFSZ     R13, 1
0x0194	0x2993      	GOTO       L_main0
0x0195	0x0BFC      	DECFSZ     R12, 1
0x0196	0x2993      	GOTO       L_main0
0x0197	0x0BFB      	DECFSZ     R11, 1
0x0198	0x2993      	GOTO       L_main0
0x0199	0x0000      	NOP
0x019A	0x0000      	NOP
;finalfire.c,32 :: 		while (1) {
L_main1:
;finalfire.c,33 :: 		checkFlameSensors();
0x019B	0x215A      	CALL       _checkFlameSensors
;finalfire.c,34 :: 		}
0x019C	0x299B      	GOTO       L_main1
;finalfire.c,35 :: 		}
L_end_main:
0x019D	0x299D      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003      [21]    _stopWaterPump
0x0018      [49]    _startWaterPump
0x0049       [8]    _forward
0x0051      [17]    _stopCar
0x0062      [39]    _ATD_read
0x0089      [69]    _goToFire
0x00CE      [33]    _left
0x00EF      [33]    _right
0x0110      [55]    _moveTowardsFlame
0x0147      [10]    _ATD_start
0x0151       [9]    _PWM_Init
0x015A      [12]    _checkFlameSensors
0x0166      [38]    _initialize
0x018C      [18]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    PORTA
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x0012       [1]    T2CON
0x0015       [1]    CCPR1L
0x0017       [1]    CCP1CON
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0020       [2]    _ctr_return
0x0022       [1]    _pumping
0x0023       [1]    _HL
0x0024       [2]    ___DoICPAddr
0x0026       [1]    _moving_Forward
0x0027       [2]    _angle
0x0029       [1]    goToFire_going_L0
0x002A       [1]    goToFire_found_fire_L0
0x002B       [2]    goToFire_fire_read_L0
0x002D       [2]    FARG_ATD_read_channel_Number
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x009E       [1]    ADRESL
0x009F       [1]    ADCON1
